(set-logic ALL)
(set-option :produce-models true)
; Uncomment if using CVC5
(set-option :incremental true)

(declare-const phi0 Bool)
(declare-const phi1 Bool)
(declare-const phi2 Bool)
(declare-const phi3 Bool)
(declare-const x0 (_ BitVec 32))
(declare-const x1 (_ BitVec 32))
(declare-const x2 (_ BitVec 32))
(declare-const v0 (_ BitVec 32))
(declare-const v1 (_ BitVec 32))
(declare-const v2 (_ BitVec 32))
(declare-const z0 (_ BitVec 32))
(declare-const z1 (_ BitVec 32))
(declare-const z2 (_ BitVec 32))
(declare-const z3 (_ BitVec 32))
(declare-const z4 (_ BitVec 32))
(declare-const N (_ BitVec 32))
(declare-const data (Array (_ BitVec 32) (_ BitVec 32)))

(assert (= phi0 (and (bvsle #x00000000 x0) (bvslt x0 N))))
(assert (= phi1 (bvsge x0 #x00000003)))
(assert (= x1 (bvsub (bvmul #x00000002 x0) #x00000005)))
(assert (= x2 (ite phi1 x1 x0)))
(assert (= v0 (select data x2)))
(assert (= phi2 (and (bvsge v0 #x00000000) (bvslt v0 (bvsdiv N #x00000002)))))
(assert (= phi3 (and (bvsge v0 (bvsdiv N #x00000002)) (bvslt v0 N))))
(assert (= z0 (select data (bvmul #x00000002 v0))))
(assert (= v1 (bvsdiv (bvadd x2 (bvmul #x00000002 v0)) #x00000003)))
(assert (= z1 (select data v1)))
(assert (= z2 (select data (select data #x00000000))))
(assert (= z3 (ite phi2 z0 (ite phi3 z1 z2))))
(assert (= v2 (ite phi2 v0 (ite phi3 v1 v0))))
(assert (= z4 (ite phi0 z3 #x00000000)))

; Your code goes here
